{
	"info": {
		"_postman_id": "library-management-api",
		"name": "Library Management System API",
		"description": "Complete Postman collection for testing the Library Management System REST API. Includes all CRUD operations, search, and pagination endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "library-management"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "Get All Books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books"
							]
						},
						"description": "Retrieves all books from the library database."
					},
					"response": []
				},
				{
					"name": "Get Book by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"1"
							]
						},
						"description": "Retrieves a single book by its ID. Change the ID in the URL to test different books."
					},
					"response": []
				},
				{
					"name": "Search Books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books?search=Java",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books"
							],
							"query": [
								{
									"key": "search",
									"value": "Java",
									"description": "Search by title or author"
								}
							]
						},
						"description": "Searches for books by title or author. The search is case-insensitive and matches partial strings."
					},
					"response": []
				},
				{
					"name": "Get Books with Pagination",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books?page=0&size=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"description": "Page number (0-indexed)"
								},
								{
									"key": "size",
									"value": "5",
									"description": "Number of items per page"
								}
							]
						},
						"description": "Retrieves books with pagination. Page is 0-indexed. Returns metadata about total pages and elements."
					},
					"response": []
				},
				{
					"name": "Create New Book",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Pragmatic Programmer\",\n    \"author\": \"Andrew Hunt, David Thomas\",\n    \"isbn\": \"978-0135957059\",\n    \"publishedDate\": \"2019-09-13\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books"
							]
						},
						"description": "Creates a new book in the library. All fields are required except id (auto-generated)."
					},
					"response": []
				},
				{
					"name": "Update Existing Book",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Clean Code: A Handbook of Agile Software Craftsmanship (Updated)\",\n    \"author\": \"Robert C. Martin\",\n    \"isbn\": \"978-0132350884\",\n    \"publishedDate\": \"2008-08-01\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"1"
							]
						},
						"description": "Updates an existing book. The ID in the URL specifies which book to update. All fields should be provided."
					},
					"response": []
				},
				{
					"name": "Delete Book",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"books",
								"1"
							]
						},
						"description": "Deletes a book by its ID. This operation cannot be undone."
					},
					"response": []
				}
			],
			"description": "All book-related endpoints for CRUD operations"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
